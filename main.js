!function(){"use strict";class e{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_hideInputError(e){const t=document.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_showInputError(e){const t=document.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass);const s=e.validationMessage;t.textContent=s,t.classList.add(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_turnButtonActive(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_turnButtonInActive(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidOutput(){return!this._inputEls.every((e=>e.validity.valid))}toggleButtonState(){this._hasInvalidOutput()?this._turnButtonInActive():this._turnButtonActive()}_setEventListeners(){this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this.toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState(this._inputEls,this._submitButton)}))}))}enableValidation(){console.log("this function is being called"),this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t){let{renderer:s,items:o}=e;this._renderer=s,this._items=o,this._element=document.querySelector(`.${t}`)}renderItems(){console.log("render Items is being called"),this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._element.prepend(e)}}const s=document.querySelector("#add-card-modal"),o=document.querySelector("#edit-modal"),r=(s.querySelector(".modal__input-description_type_url"),s.querySelector(".modal__input-title_type_title"),document.querySelector(".profile__header"),document.querySelector(".profile__subheader"),o.querySelector(".modal__input-title")),i=o.querySelector(".modal__input-description"),n=document.querySelector(".profile__add-button"),l=document.querySelector(".profile__edit-button"),a=document.querySelector("#add-card-form"),d=document.querySelector("#edit-modal"),c=document.querySelector("#edit-profile-avatar-modal"),h={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},u=document.querySelector(".profile__picture");class m{constructor(e,t,s,o,r,i){let{isLiked:n,name:l,link:a,_id:d}=e;this.name=l,this.link=a,this.isLiked=n,this.id=d,this.cardSelector=t,this._handleImageClick=s,this._addLikeButton=r,this._removeLikeButton=i,this.openDeleteForm=o}_setEventListeners(){this.likeButton.addEventListener("click",(()=>{0==this.isLiked?(console.log("the person has liked this post"),this._addLikeButton(this)):(console.log("the person has doesn't like this post"),this._removeLikeButton(this))})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{console.log("button is being pressed"),this.openDeleteForm(this)})),this.cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this)}))}_likeStatus(){this.isLiked?this._removeLikeButton(this):this._addLikeButton(this)}addLikeButtonElement(){this.likeButton.classList.add("card__like-button_active")}removeLikeButtonElement(){this.likeButton.classList.remove("card__like-button_active")}_toggleLikeButton(){this.likeButton.classList.toggle("card__like-button_active")}deleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){const e=document.querySelector(this.cardSelector).content.firstElementChild;return this._cardElement=e.cloneNode(!0),this.cardImageElement=this._cardElement.querySelector(".card__image"),this.cardTitleElement=this._cardElement.querySelector(".card__title"),this.likeButton=this._cardElement.querySelector(".card__like-button"),this._setEventListeners(),this.cardImageElement.setAttribute("src",this.link),this.cardImageElement.setAttribute("alt",this.name),this.cardTitleElement.textContent=this.name,1==this.isLiked?this.addLikeButtonElement():this.removeLikeButtonElement(),this._cardElement}}class p{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(`${t}`),this._modalCloseButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{console.log("f has been called"),"Escape"===e.key&&this.close()};setEventListeners(){this._modalCloseButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close()}))}}class _ extends p{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super({popupSelector:t}),this.popupForm=this._popupElement.querySelector(".modal__form"),this._handFormSubmit=s,console.log(this._popupForm),this._submitButton=this._popupElement.querySelector(".modal__save-button"),this._modalSaveButtonDefaultText=this._submitButton.textContent}_getInputValues(){const e=this.popupForm.querySelectorAll(".modal__input");console.log(e);const t={};return e.forEach((e=>{t[e.name]=e.value})),t}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";console.log(this._modalSaveButtonDefaultText+" is the value of the default text"),this._submitButton.textContent=e?t:this._modalSaveButtonDefaultText}setEventListeners(){this.popupForm.addEventListener("submit",(e=>{e.preventDefault(),this.inputValues=this._getInputValues(),this.renderLoading(!0),this._handFormSubmit(this.inputValues)})),super.setEventListeners()}}const g=e=>{b.open(e)},E=e=>{const t=new m(e,"#card-template",g,(function(){q.open(),q.setSubmitAction((()=>{q.renderLoading(!0,"Deleting..."),U.deleteCard(t.id).then((e=>{console.log("The delete card function is being called"),t.deleteCard()})).then((()=>{q.close()})).finally((()=>{q.renderLoading(!1)})).catch((e=>{console.log(`There is an error in the program: ${e}`)}))}))}),(function(){U.addLike(t.id).then((e=>{t.isLiked=e.isLiked,t.addLikeButtonElement()})).catch((e=>{console.log(`There is an error in the program: ${e}`)}))}),(function(){U.removeLike(t.id).then((e=>{t.isLiked=e.isLiked,t.removeLikeButtonElement()})).catch((e=>{console.log(`There is an error in the program: ${e}`)}))}));return t.getView()},v={popupSelector:"#add-card-modal",handleFormSubmit:e=>{y.renderLoading(!0,"Saving..."),U.addCard(e.name,e.link).then((e=>{const t=E(e);I.addItem(t)})).then((()=>{y.close(),y.popupForm.reset(),k.toggleButtonState()})).finally((()=>{y.renderLoading(!1)})).catch((e=>{console.log(`There is an error in the program: ${e}`)}))}},f={popupSelector:"#edit-modal",handleFormSubmit:e=>{C.renderLoading(!0,"Saving..."),U.editProfile(e.profileName,e.profileJob).then((t=>{L.setUserInfo(e.profileName,e.profileJob),console.log(t)})).then((e=>{C.popupForm.reset(),B.toggleButtonState(),C.close()})).finally((()=>{C.renderLoading(!1)})).catch((e=>{console.log(`There is an error in the program: ${e}`)}))}},S={popupSelector:"#edit-profile-avatar-modal",handleFormSubmit:e=>{T.renderLoading(!0,"Saving..."),U.updateProfilePicture(e.avatar).then((t=>{L.setUserAvatar(e.avatar),console.log(t)})).then((()=>{T.close(),T.popupForm.reset(),x.toggleButtonState()})).finally((()=>{T.renderLoading(!1)})).catch((e=>{console.log(`There is an error in the program: ${e}`)}))}},b=new class extends p{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this.popupImageElement=document.querySelector(".image-modal__image-element"),this.popupImageTextElement=document.querySelector(".image-modal__text")}open(e){let{name:t,link:s}=e;this.popupImageElement.setAttribute("src",s),this.popupImageElement.setAttribute("alt",t),this.popupImageTextElement.textContent=t,super.open()}}({popupSelector:".image-modal"}),L=new class{constructor(e,t,s){this.profileJobEl=document.querySelector(t),this.profileNameEl=document.querySelector(e),this.profileAvatarEl=document.querySelector(s)}getUserInfo(){const e={name:"",job:""};return e.name=this.profileNameEl.textContent,e.job=this.profileJobEl.textContent,e}setUserInfo(e,t){this.profileJobEl.textContent=t,this.profileNameEl.textContent=e}setUserAvatar(e){console.log("setUserAvatar() has been called"),console.log(e),this.profileAvatarEl.setAttribute("src",e),this.profileAvatarEl.setAttribute("alt",this.profileNameEl.textContent)}}(".profile__header",".profile__subheader",".profile__picture_image"),k=new e(h,a),y=new _(v),B=new e(h,d),C=new _(f);let I;const q=new class extends p{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this.popupForm=this._popupElement.querySelector(".modal__form"),console.log(this._popupForm),this._modalDeleteButton=this._popupElement.querySelector(".modal__save-button"),this._modalDeleteButtonDefaultText=this._modalDeleteButton.textContent}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this.popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";console.log("render loading method is being called"),this._modalDeleteButton.textContent=1==e?t:this._modalDeleteButtonDefaultText}}({popupSelector:"#delete-card-modal"}),T=new _(S),x=new e(h,c);T.setEventListeners(),q.setEventListeners(),y.setEventListeners(),C.setEventListeners(),b.setEventListeners(),x.enableValidation(),B.enableValidation(),k.enableValidation(),n.addEventListener("click",(()=>{y.open()})),l.addEventListener("click",(()=>{const{name:e,job:t}=L.getUserInfo();console.log(L.getUserInfo()),r.value=e,i.value=t,C.open()})),u.addEventListener("click",(()=>{console.log("Image profile avatar is being clicked"),T.open()}));const U=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkValidResponse)}loadUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkValidResponse)}loadCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkValidResponse)}editProfile(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkValidResponse)}addCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkValidResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkValidResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkValidResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkValidResponse)}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkValidResponse)}_fetchRequest(e,t){return fetch(e,t).then(this._checkValidResponse)}_checkValidResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"883a5f27-9ca4-4397-af55-ef56c8ad3047","Content-Type":"application/json"}});U.loadUserInfo().then((e=>{let{name:t,about:s,avatar:o}=e;L.setUserInfo(t,s),L.setUserAvatar(o)})).catch((e=>{console.log(`There is an error in the program: ${e}`)})),U.getInitialCards().then((e=>{I=new t({renderer:e=>{const t=E(e);I.addItem(t)},items:e},"cards__list"),I.renderItems()})).catch((e=>{console.log(`There is an error in the program: ${e}`)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,